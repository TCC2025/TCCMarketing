Please update the Hero section with these changes:

Remove the top brushstroke — keep only the bottom wave that displays all 5 colors.

Add the new shine overlay using noise.webp with mix-blend-mode: overlay (see attached CSS). This will give the gradient depth and polish.

Ensure the noise file is placed in /public so it’s accessible at /noise.webp.

Double-check the hero container maintains z-index so text and CTAs sit cleanly above the shine.

Keep the gradient path compressed (x2="1200") so all 5 brand colors are visible.    1) Hero markup (replace your current hero section)   <section class="hero" id="home" aria-label="Homepage hero">   <div class="container">     <p class="hero__eyebrow">Enterprise-Grade Strategy, Human-Centered Growth</p>      <h1 class="hero__title">       <span>Cut Through the Noise.</span><br />       <span class="hero__title--teal">Grow With Clarity.</span>     </h1>      <p class="hero__subhead">       Your brand doesn’t have to run on reactive patchwork. We bring enterprise-grade strategy and AI-driven clarity to align       brand equity, go-to-market strategy, and employer branding.     </p>      <div class="hero__ctas">       <a         class="btn btn--primary"         href="#contact"         data-event="cta_click"         data-location="hero"         data-variant="primary"         data-label="strategy_consult"       >Let’s Talk Strategy</a>        <a         class="btn btn--ghost"         href="#blueprint"         data-event="cta_click"         data-location="hero"         data-variant="ghost"         data-label="blueprint_download"       >Get the Talent Marketing Blueprint</a>     </div>      <p class="hero__support microcopy">No pressure—30 minutes to get clarity. Conversation, not sales.</p>     <p class="hero__promise"><em>Growth that’s sustainable, measurable, and predictable. It’s science.</em></p>   </div>    <!-- Single bottom gradient wave (keep) -->   <svg class="hero__wave" viewBox="0 0 2000 220" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" aria-hidden="true">     <defs>       <linearGradient id="tccGrad" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="1200" y2="0">         <stop offset="0%"   stop-color="#10676F"/>         <stop offset="22%"  stop-color="#0F2435"/>         <stop offset="48%"  stop-color="#D89B2D"/>         <stop offset="74%"  stop-color="#F07B1E"/>         <stop offset="100%" stop-color="#E7156A"/>       </linearGradient>     </defs>     <path d="M0,140 C600,60 1400,220 2000,120 L2000,220 L0,220 Z" fill="url(#tccGrad)"/>   </svg> </section>               2) CSS (shine + polish)  Paste into your main CSS (where your hero styles live). This includes:  Luxe spacing/typography  Gloss overlay and noise texture on the gradient  Optional shimmer you can toggle by adding .hero--shimmer to the <section> element  Accessibility: motion-reduction    /* ========== HERO LAYOUT ========== */ .hero{   position: relative;   background: var(--tcc-bg); /* Ivory */   overflow: hidden;   padding: clamp(72px, 9vw, 128px) 0 0; /* top padding; wave adds bottom weight */ } .hero .container{   position: relative;   z-index: 1;   width: min(1100px, 92%);   margin-inline: auto;   text-align: center; }  /* Typography rhythm */ .hero__eyebrow{   display:inline-block; padding:6px 14px; border:1px solid var(--tcc-border);   border-radius:999px; font-size:12px; letter-spacing:.08em; text-transform:uppercase;   color:#3C4A57; background:#fff; margin-bottom:18px; } .hero__title{ color:var(--tcc-navy); margin:0 0 10px; font-size:clamp(40px,6vw,72px); line-height:1.06; } .hero__title--teal{ color:var(--tcc-teal); } .hero__subhead{   color:#2E3E49; opacity:1; max-width:820px; margin:14px auto 28px;   font-size:clamp(16px,1.1vw,19px); line-height:1.6; }  /* CTAs */ .hero__ctas{ display:flex; gap:14px; justify-content:center; flex-wrap:wrap; margin:18px 0 10px; } .btn{   display:inline-flex; align-items:center; justify-content:center;   padding:12px 18px; border-radius:12px; font-weight:700; border:1px solid transparent;   transition:transform .08s ease, box-shadow .2s ease; } .btn--primary{ background:var(--tcc-navy); color:#fff; box-shadow:0 8px 24px rgba(15,36,53,.16); } .btn--primary:hover{ transform:translateY(-1px); box-shadow:0 12px 28px rgba(15,36,53,.22); } .btn--ghost{ background:#fff; color:var(--tcc-navy); border:1px solid var(--tcc-border); } .btn--ghost:hover{   background: linear-gradient(#fff,#fff) padding-box, var(--primary-gradient) border-box;   border-color:transparent; transform:translateY(-1px); } .hero__support{ margin-top:8px; color:#475968; } .hero__promise{ margin-top:12px; color:#3b4a55; }  /* ========== BOTTOM WAVE ========== */ .hero__wave{   position: relative; display:block; width:110%; height:220px; left:-5%;   margin-top: clamp(32px, 6vw, 56px); }  /* Shine 1: Gloss overlay (adds depth without kitsch) */ .hero__wave::after{   content:""; position:absolute; inset:0;   background: linear-gradient(     120deg,     rgba(255,255,255,0.22) 0%,     rgba(255,255,255,0.00) 38%,     rgba(255,255,255,0.16) 72%,     rgba(255,255,255,0.00) 100%   );   mix-blend-mode: screen; pointer-events:none; }  /* Shine 2: Subtle noise (prevents banding) — add /textures/noise.png */ .hero__wave::before{   content:""; position:absolute; inset:0;   background: url('/textures/noise.png');   opacity: .08; mix-blend-mode: overlay; pointer-events:none; }  /* Shine 3 (optional): animated shimmer; enable by adding class .hero--shimmer to the section */ .hero--shimmer .hero__wave::after{   animation: tcc_shine 6s linear infinite; } @keyframes tcc_shine{   0%{ transform: translateX(-100%); }   100%{ transform: translateX(100%); } }  /* Respect reduced motion */ @media (prefers-reduced-motion: reduce){   .btn, .hero__wave::after{ transition:none; animation:none; } }        Noise asset: drop a tiny seamless noise PNG at /public/textures/noise.png (2–4 KB). If you don’t have one, I can generate it next—just say the word.            3) Message to your Replit agent (paste this)      from PIL import Image import numpy as np  # Generate a seamless noise texture (transparent PNG with subtle monochrome noise) size = (128, 128)  # small tileable texture noise_array = np.random.randint(0, 256, (size[1], size[0]), dtype=np.uint8)  # Convert to RGBA, keep noise in alpha channel for blend flexibility noise_img = Image.fromarray(noise_array, mode='L').convert("RGBA")  # Make noise grayscale with slight transparency pixels = noise_img.load() for y in range(size[1]):     for x in range(size[0]):         val = pixels[x, y][0]         pixels[x, y] = (val, val, val, 20)  # light gray with alpha  # Save as PNG and WEBP png_path = "/mnt/data/noise.png" webp_path = "/mnt/data/noise.webp"  noise_img.save(png_path, format="PNG", optimize=True) noise_img.save(webp_path, format="WEBP", quality=80)  png_path, webp_path                       from PIL import Image import numpy as np  # Generate a seamless noise texture (transparent PNG with subtle monochrome noise) size = (128, 128)  # small tileable texture noise_array = np.random.randint(0, 256, (size[1], size[0]), dtype=np.uint8)  # Convert to RGBA, keep noise in alpha channel for blend flexibility noise_img = Image.fromarray(noise_array, mode='L').convert("RGBA")  # Make noise grayscale with slight transparency pixels = noise_img.load() for y in range(size[1]):     for x in range(size[0]):         val = pixels[x, y][0]         pixels[x, y] = (val, val, val, 20)  # light gray with alpha  # Save as PNG and WEBP png_path = "/mnt/data/noise.png" webp_path = "/mnt/data/noise.webp"  noise_img.save(png_path, format="PNG", optimize=True) noise_img.save(webp_path, format="WEBP", quality=80)  png_path, webp_path          Hero cleanup + shine (final pass)  Remove the top brushstroke SVG behind the copy. Keep the hero background ivory.  Keep a single bottom gradient wave as the section anchor. Use the provided <svg class="hero__wave"> with the condensed gradient (x2="1200") so all five brand colors render.  Add the shine styles:  Gloss overlay on the wave (::after with blend-mode: screen)  Subtle noise overlay (/textures/noise.png, ~2–4 KB) with mix-blend-mode: overlay  Optional shimmer is available—enable by adding .hero--shimmer to the <section> if we want animation.  Ensure accessibility & analytics remain:  aria-label="Homepage hero" on the <section>; the wave SVG is aria-hidden="true".  data-event, data-location, data-variant, data-label on both hero CTAs.  Keep design tokens: --tcc-bg, --tcc-navy, --tcc-teal, and --primary-gradient—no hardcoded colors in CSS besides the shine overlays.  Respect prefers-reduced-motion (provided in CSS) and keep button hover micro-interactions.  Goal: clean, luxe hero on ivory with a single, shiny gradient anchor—fully legible, brand-forward, and reliable.          Updated Hero Shine Implementation  Add this overlay layer to your hero section for a modern “shine” effect:      .hero {   position: relative;   background: var(--background);   overflow: hidden;   padding: clamp(72px, 9vw, 128px) 0; }  .hero::after {   content: "";   position: absolute;   inset: 0;   background: url("/noise.webp") repeat;   opacity: 0.15; /* adjust for stronger shine */   pointer-events: none;   mix-blend-mode: overlay; /* key for subtle shine */   z-index: 0; }  .hero .container {   position: relative;   z-index: 1; }   Noise Texture Files  I generated seamless noise textures you can upload to /public or /assets:  noise.png  noise.webp  (preferred, smaller & faster)